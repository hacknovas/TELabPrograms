# @Doni_Prathamesh

S_Box = [
    ["0x63", "0x7C", "0x77", "0x7B", "0xF2", "0x6B", "0x6F", "0xC5", "0x30", "0x01", "0x67", "0x2B", "0xFE", "0xD7",
     "0xAB", "0x76"],
    ["0xCA", "0x82", "0xC9", "0x7D", "0xFA", "0x59", "0x47", "0xF0", "0xAD", "0xD4", "0xA2", "0xAF", "0x9C", "0xA4",
     "0x72", "0xC0"],
    ["0xB7", "0xFD", "0x93", "0x26", "0x36", "0x3F", "0xF7", "0xCC", "0x34", "0xA5", "0xE5", "0xF1", "0x71", "0xD8",
     "0x31", "0x15"],
    ["0x04", "0xC7", "0x23", "0xC3", "0x18", "0x96", "0x05", "0x9A", "0x07", "0x12", "0x80", "0xE2", "0xEB", "0x27",
     "0xB2", "0x75"],
    ["0x09", "0x83", "0x2C", "0x1A", "0x1B", "0x6E", "0x5A", "0xA0", "0x52", "0x3B", "0xD6", "0xB3", "0x29", "0xE3",
     "0x2F", "0x84"],
    ["0x53", "0xD1", "0x00", "0xED", "0x20", "0xFC", "0xB1", "0x5B", "0x6A", "0xCB", "0xBE", "0x39", "0x4A", "0x4C",
     "0x58", "0xCF"],
    ["0xD0", "0xEF", "0xAA", "0xFB", "0x43", "0x4D", "0x33", "0x85", "0x45", "0xF9", "0x02", "0x7F", "0x50", "0x3C",
     "0x9F", "0xA8"],
    ["0x51", "0xA3", "0x40", "0x8F", "0x92", "0x9D", "0x38", "0xF5", "0xBC", "0xB6", "0xDA", "0x21", "0x10", "0xFF",
     "0xF3", "0xD2"],
    ["0xCD", "0x0C", "0x13", "0xEC", "0x5F", "0x97", "0x44", "0x17", "0xC4", "0xA7", "0x7E", "0x3D", "0x64", "0x5D",
     "0x19", "0x73"],
    ["0x60", "0x81", "0x4F", "0xDC", "0x22", "0x2A", "0x90", "0x88", "0x46", "0xEE", "0xB8", "0x14", "0xDE", "0x5E",
     "0x0B", "0xDB"],
    ["0xE0", "0x32", "0x3A", "0x0A", "0x49", "0x06", "0x24", "0x5C", "0xC2", "0xD3", "0xAC", "0x62", "0x91", "0x95",
     "0xE4", "0x79"],
    ["0xE7", "0xC8", "0x37", "0x6D", "0x8D", "0xD5", "0x4E", "0xA9", "0x6C", "0x56", "0xF4", "0xEA", "0x65", "0x7A",
     "0xAE", "0x08"],
    ["0xBA", "0x78", "0x25", "0x2E", "0x1C", "0xA6", "0xB4", "0xC6", "0xE8", "0xDD", "0x74", "0x1F", "0x4B", "0xBD",
     "0x8B", "0x8A"],
    ["0x70", "0x3E", "0xB5", "0x66", "0x48", "0x03", "0xF6", "0x0E", "0x61", "0x35", "0x57", "0xB9", "0x86", "0xC1",
     "0x1D", "0x9E"],
    ["0xE1", "0xF8", "0x98", "0x11", "0x69", "0xD9", "0x8E", "0x94", "0x9B", "0x1E", "0x87", "0xE9", "0xCE", "0x55",
     "0x28", "0xDF"],
    ["0x8C", "0xA1", "0x89", "0x0D", "0xBF", "0xE6", "0x42", "0x68", "0x41", "0x99", "0x2D", "0x0F", "0xB0", "0x54",
     "0xBB", "0x16"]
]

round_const = ["0x01", "0x02", "0x04", "0x08", "0x10", "0x20", "0x40", "0x80", "0x1b", "0x36"]


def cyclic_left_shift(arr):
    temp = arr[0]
    arr[0] = arr[1]
    arr[1] = arr[2]
    arr[2] = arr[3]
    arr[3] = temp
    return arr


def substitution(arr):
    if len(arr[0]) == 4:
        arr[0] = S_Box[int(arr[0][2], 16)][int(arr[0][3], 16)]
    else:
        arr[0] = S_Box[0][int(arr[0][2], 16)]

    if len(arr[1]) == 4:
        arr[1] = S_Box[int(arr[1][2], 16)][int(arr[1][3], 16)]
    else:
        arr[1] = S_Box[0][int(arr[1][2], 16)]

    if len(arr[2]) == 4:
        arr[2] = S_Box[int(arr[2][2], 16)][int(arr[2][3], 16)]
    else:
        arr[2] = S_Box[0][int(arr[2][2], 16)]

    if len(arr[3]) == 4:
        arr[3] = S_Box[int(arr[3][2], 16)][int(arr[3][3], 16)]
    else:
        arr[3] = S_Box[0][int(arr[3][2], 16)]

    return arr


def round_constant(arr, i):
    arr[0] = hex(int(arr[0], 16) ^ int(round_const[i], 16))
    return arr


def key_expansion(matrix, KeyGenerated):
    end = 4
    start = 0
    for i in range(10):
        temp = matrix[start:end]
        # On third word
        g_fun = temp[3].copy()
        g_fun = cyclic_left_shift(g_fun)
        g_fun = substitution(g_fun)
        g_fun = round_constant(g_fun, i)

        # ^ with third anf first word
        KeyGenerated += 1
        for j in range(4):
            matrix[KeyGenerated].append(hex(int(temp[0][j], 16) ^ int(g_fun[j], 16)))

        for x in range(3):
            ref = matrix[KeyGenerated]
            KeyGenerated += 1
            for y in range(4):
                matrix[KeyGenerated].append(hex(int(ref[y], 16) ^ int(temp[x + 1][y], 16)))

        start = end
        end += 4
    return matrix


# Main
key = list(input("Enter Key: ")) #16 bit
matrix = [[] for i in range(44)] #all word 44
KeyGenerated = 0 #word

cnt = 0

for i in key:
    if cnt == 4:
        cnt = 0
        KeyGenerated += 1
    convert_string = ord(i)
    convert_hex = hex(convert_string)
    matrix[KeyGenerated].append(convert_hex)
    cnt += 1

matrix = key_expansion(matrix, KeyGenerated)

# To print All 44 Keys
for i in range(44):
    print("W", i, ": ", matrix[i])
    print()
